// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.Sirius.Repositories.DbContexts;

namespace Service.Sirius.Repositories.Migrations
{
    [DbContext(typeof(SiriusContext))]
    [Migration("20200317150647_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sirius")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.DepositEntity", b =>
                {
                    b.Property<string>("BlockchainId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssetId")
                        .HasColumnType("text");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("BlockchainId", "NetworkId", "Id");

                    b.HasIndex("BlockchainId", "NetworkId", "TransactionHash")
                        .IsUnique()
                        .HasName("IX_BlockchainId_NetworkId_TransactionHash");

                    b.ToTable("deposits");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.DepositSourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("DepositBlockchainId")
                        .HasColumnType("text");

                    b.Property<string>("DepositId")
                        .HasColumnType("text");

                    b.Property<string>("DepositNetworkId")
                        .HasColumnType("text");

                    b.Property<string>("SourceAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepositBlockchainId", "DepositNetworkId", "DepositId");

                    b.ToTable("deposit_sources");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.DepositWalletEntity", b =>
                {
                    b.Property<string>("BlockchainId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("OriginalWalletAddress")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("text");

                    b.HasKey("BlockchainId", "NetworkId", "Id");

                    b.HasIndex("BlockchainId", "NetworkId", "GroupName");

                    b.HasIndex("BlockchainId", "NetworkId", "WalletAddress")
                        .IsUnique()
                        .HasName("IX_DW_BlockchainId_NetworkId_WalletAddress");

                    b.ToTable("deposit_wallets");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.HotWalletEntity", b =>
                {
                    b.Property<string>("BlockchainId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("OriginalWalletAddress")
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("text");

                    b.HasKey("BlockchainId", "NetworkId", "Id");

                    b.HasIndex("BlockchainId", "NetworkId", "GroupName")
                        .IsUnique();

                    b.HasIndex("BlockchainId", "NetworkId", "WalletAddress")
                        .IsUnique()
                        .HasName("IX_HW_BlockchainId_NetworkId_WalletAddress");

                    b.ToTable("hot_wallets");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.WalletGroupEntity", b =>
                {
                    b.Property<string>("BlockchainId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkId")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("BlockchainId", "NetworkId", "GroupName");

                    b.ToTable("wallet_groups");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.DepositSourceEntity", b =>
                {
                    b.HasOne("Service.Sirius.Repositories.Entities.DepositEntity", "Deposit")
                        .WithMany("DepositSources")
                        .HasForeignKey("DepositBlockchainId", "DepositNetworkId", "DepositId");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.DepositWalletEntity", b =>
                {
                    b.HasOne("Service.Sirius.Repositories.Entities.WalletGroupEntity", "WalletGroup")
                        .WithMany("DepositWallets")
                        .HasForeignKey("BlockchainId", "NetworkId", "GroupName");
                });

            modelBuilder.Entity("Service.Sirius.Repositories.Entities.HotWalletEntity", b =>
                {
                    b.HasOne("Service.Sirius.Repositories.Entities.WalletGroupEntity", "WalletGroup")
                        .WithOne("HotWallet")
                        .HasForeignKey("Service.Sirius.Repositories.Entities.HotWalletEntity", "BlockchainId", "NetworkId", "GroupName");
                });
#pragma warning restore 612, 618
        }
    }
}
